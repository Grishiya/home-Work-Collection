Ваше задание на сегодня: 

1. Перенести проект с EmployeeBook на Map в качестве хранилища сотрудников
, реализовав методы добавления, удаления и поиска.
2. Продумать контракт для ключей, чтобы сотрудник с одним ФИО существовал только в одном экземпляре,
корректно добавлялся и удалялся.
3. Избавиться от циклов в методах по поиску сотрудника, заменив на методы Map.
4. Переработать все методы по работе с хранилищем на работу с методами Map.

Задание может быть выполнено по-разному. Главное, чтобы были выполнены критерии.
 Если какой-то информации в задании не хватает, действуйте на свое усмотрение.
- **Критерии оценки**
    - Все сотрудники существуют только в одном экземпляре
    - Поиск сотрудников осуществляется с помощью метода
    - Все методы по работе с хранилищем заменены на мапы
    - Любого сотрудника можно удалить
    - Можно добавить нового сотрудника
    - Проект перенесен на map
    -----------------------------------------------------------------------------------------------------------------
    Шаг 1. Добавить в поле Employee поля «Зарплата» и «Отдел» из курсовой работы.

    Шаг 2. В текущий проект на Spring перенести методы работы с отделами из курсовой работы.

    Шаг 3. Заменить реализацию через циклы на Stream API. Написать новый контроллер и сервис, которые будут:

    1. Возвращать сотрудника с максимальной зарплатой на основе номера отдела, который приходит в запрос из браузера.

        ```java
        /departments/max-salary?departmentId=5
        ```

    2.  Возвращать сотрудника с минимальной зарплатой на основе номера отдела.

        ```java
         /departments/min-salary?departmentId=5
        ```

    3. Возвращать всех сотрудников по отделу.

        ```java
        /departments/all?departmentId=5
        ```

    4. Возвращать всех сотрудников с разделением по отделам.

        ```java
         /departments/all
        ```


    - Подсказка

        Для того чтобы получить список сотрудников, надо в новый сервис заинжектить старый сервис
         и запросить список всех сотрудников, затем этот список пропустить через Stream API.

        Для поиска минимальной или максимальной зарплаты нужно после фильтрации использовать методы min и max,
         передав в качестве компаратора строку кода, представленную ниже.

        ```java
        Comparator.comparingInt(employee -> employee.getSalary())
        ```

    - Критерии оценки:
        - В поле Employee  добавлены новые поля «Зарплата» и «Отдел»
        - Переписаны контроллер и сервис, которые возвращают сотрудника с максимальной зарплатой
         на основе номера отдела, который приходит в запрос из браузера.
        - Переписаны контроллер и сервис, которые возвращают сотрудника с минимальной зарплатой на основе номера отдела.
        - Переписаны контроллер и сервис, которые возвращают всех сотрудников по отделу
        - Переписаны контроллер и сервис, которые возвращают всех сотрудников с разделением по отделам.
        - Реализация проекта заменена через циклы на Stream API.